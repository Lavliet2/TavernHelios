import { fileURLToPath, URL } from 'node:url';
import { defineConfig } from 'vite';
import plugin from '@vitejs/plugin-react';
import fs from 'fs';
import path from 'path';
import child_process from 'child_process';
import { env } from 'process';

const isDev = env.NODE_ENV === 'development';

const baseFolder =
    env.APPDATA !== undefined && env.APPDATA !== ''
        ? `${env.APPDATA}/ASP.NET/https`
        : `${env.HOME}/.aspnet/https`;

const certificateName = "tavernhelios.client";
const certFilePath = path.join(baseFolder, `${certificateName}.pem`);
const keyFilePath = path.join(baseFolder, `${certificateName}.key`);

if (isDev && (!fs.existsSync(certFilePath) || !fs.existsSync(keyFilePath))) {
    if (0 !== child_process.spawnSync('dotnet', [
        'dev-certs',
        'https',
        '--export-path',
        certFilePath,
        '--format',
        'Pem',
        '--no-password',
    ], { stdio: 'inherit' }).status) {
        throw new Error("Could not create certificate.");
    }
}

// üîπ –¢—É—Ç –ø—Ä–æ–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å –±—ç–∫–µ–Ω–¥–∞
const target = env.VITE_API_URL || `https://localhost:32783`;

export default defineConfig({
    plugins: [plugin()],
    resolve: {
        alias: {
            '@': fileURLToPath(new URL('./src', import.meta.url))
        }
    },
    server: {
        proxy: {
            // üîπ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –í–°–ï –∑–∞–ø—Ä–æ—Å—ã, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å `/api`
            '/api': {
                target, // API-—Å–µ—Ä–≤–µ—Ä
                changeOrigin: true, // –ú–µ–Ω—è–µ—Ç `Host` –∑–∞–≥–æ–ª–æ–≤–æ–∫
                secure: false, // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º SSL (–º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞)
                rewrite: (path) => path.replace(/^\/api/, '/api') // –£–±–∏—Ä–∞–µ–º `/api`, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            }
        },
        port: 63049,
        ...(isDev && {
            https: {
                key: fs.readFileSync(keyFilePath),
                cert: fs.readFileSync(certFilePath),
            }
        }), 
    }
});
