import { useState, useEffect, useCallback, useMemo, useRef } from "react";

import { fetchTodaySchedule } from "../../services/scheduleService"; 
import { fetchDishById } from "../../services/dishService";
import { createReservation } from "../../services/reservationService";
import { Menu, Dish } from "../../types/Management";


export const useMenuDisplay = () => {
  const [menu, setMenu] = useState<Menu | null>(null);
  const [dishes, setDishes] = useState<Dish[]>([]);
  const [loadingMenu, setLoadingMenu] = useState<boolean>(true);
  const [loadingDishes, setLoadingDishes] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);
  const [selectedDishes, setSelectedDishes] = useState<Record<number, string>>({});
  const [maxCardHeight, setMaxCardHeight] = useState<number | null>(null);
  const [selectedTime, setSelectedTime] = useState<string>("12:00");
  const [refreshKey, setRefreshKey] = useState<number>(0);
  const username = localStorage.getItem("username") || "";
  const cardRefs = useRef<HTMLDivElement[]>([]);

  useEffect(() => {
    const loadSchedule = async () => {
      setLoadingMenu(true);
      setError(null);
      try {
        const Schedule = await fetchTodaySchedule(); 
        if (Schedule && Schedule.menu) {
          setMenu(Schedule.menu); 
        } else {
          setError("–ù–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –º–µ–Ω—é");
        }
      } catch (err) {
        setError((err as Error).message);
      } finally {
        setLoadingMenu(false);
      }
    };
    loadSchedule();
  }, []);
  

  // üì• –ó–∞–≥—Ä—É–∑–∫–∞ –±–ª—é–¥
  useEffect(() => {
    const fetchDishes = async () => {
      if (!menu?.dishes.length) return;
      setLoadingDishes(true);
      setDishes([]);
      try {
        const dishDetails = await Promise.all(
            menu.dishes.map(async (dishId) => {
              try {
                return await fetchDishById(dishId); 
              } catch (error) {
                console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–ª—é–¥–∞ ${dishId}:`, error);
                return null; 
              }
            })
          );
        setDishes(dishDetails.filter((d) => d !== null));
      } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–ª—é–¥:", err);
        setError((err as Error).message);
        setDishes([]);
      } finally {
        setLoadingDishes(false);
      }
    };
    fetchDishes();
  }, [menu]);

  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –≤—ã—Å–æ—Ç—É –∫–∞—Ä—Ç–æ—á–µ–∫
  useEffect(() => {
    if (!loadingDishes && cardRefs.current.length > 0) {
      const heights = cardRefs.current.map((el) => el.offsetHeight);
      setMaxCardHeight(Math.max(...heights));
    }
  }, [loadingDishes, dishes]);

  // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –±–ª—é–¥
  const groupedDishes = useMemo(() => {
    return dishes.reduce((acc, dish) => {
      if (!acc[dish.dishType]) acc[dish.dishType] = [];
      acc[dish.dishType].push(dish);
      return acc;
    }, {} as Record<number, Dish[]>);
  }, [dishes]);

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ ref
  const addToCardRefs = useCallback((el: HTMLDivElement | null) => {
    if (el && !cardRefs.current.includes(el)) {
      cardRefs.current.push(el);
    }
  }, []);

  // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –±–ª—é–¥–∞
  const handleSelectionChange = useCallback((dishType: number, dishId: string) => {
    setSelectedDishes((prev) => ({
      ...prev,
      [dishType]: dishId,
    }));
  }, []);

  // –°–æ–∑–¥–∞–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  const handleReservation = useCallback(async () => {
    if (!username.trim()) {
      alert("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–µ—Ä–µ–¥ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º!");
      return;
    }

    const selectedDishIds = Object.values(selectedDishes);
    if (selectedDishIds.length === 0) {
      alert("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –±–ª—é–¥–æ!");
      return;
    }

    const [hours, minutes] = selectedTime.split(":").map(Number);
    const localDate = new Date();
    localDate.setHours(hours, minutes, 0, 0);
  
    const formattedDate = `${localDate.getFullYear()}-${String(localDate.getMonth() + 1)
      .padStart(2, "0")}-${String(localDate.getDate()).padStart(2, "0")}T${String(localDate.getHours())
      .padStart(2, "0")}:${String(localDate.getMinutes()).padStart(2, "0")}:${String(localDate.getSeconds()).padStart(2, "0")}`;

    const reservationData = {
      personId: username,
      date: formattedDate,
      dishIds: selectedDishIds,
    };

    console.log("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±—Ä–æ–Ω—å:", reservationData);

    try {
        await createReservation(reservationData);
        alert("–ë—Ä–æ–Ω—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!");
        setRefreshKey((prev) => prev + 1);
      } catch (error) {
        alert(`–û—à–∏–±–∫–∞: ${(error as Error).message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"}`);
    }
  }, [username, selectedDishes, selectedTime]);

  return {
    menu,
    groupedDishes,
    loadingMenu,
    loadingDishes,
    error,
    selectedDishes,
    maxCardHeight,
    selectedTime,
    refreshKey,
    handleReservation,
    handleSelectionChange,
    setSelectedTime,
    addToCardRefs,
  };
};
